AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Description: "minimal ec2 asg and lt"
Parameters:
  NameTag:
    Type: "String"
    Default: "tine-dev"
#  UserData:
#    Type: "String"

  AmiId:
    Type: "String"
    Default  : "ami-01966479f6da4af57" # us-west-1
    
  LtVersion:
    Type: 'String'
    Description: 'launch template version'
    Default: "1"
  SSMParameterPattern:
    Type: 'String'
    Description: 'pattern for ssm parameter'
    Default: "tine_agent_*"
  S3BucketPattern:
    Type: 'String'
    Description: 'pattern for ssm parameter'
    Default: "tine_agent_*"

Resources:
    IAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "deployagentrole"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"cloudformation.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/AdministratorAccess"
            Description: ""

    IAMRole2:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "deployagentrole2"
            AssumeRolePolicyDocument: !Sub "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::${AWS::AccountId}:root\"},\"Action\":\"sts:TagSession\"},{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::${AWS::AccountId}:root\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            Description: ""
            Tags:
              -
                Key: "aws-cdk:bootstrap-role"
                Value: "deploy"

    IAMPolicy:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"cloudformation:CreateChangeSet\",\"cloudformation:DeleteChangeSet\",\"cloudformation:DescribeChangeSet\",\"cloudformation:DescribeStacks\",\"cloudformation:ExecuteChangeSet\",\"cloudformation:CreateStack\",\"cloudformation:UpdateStack\",\"cloudformation:RollbackStack\",\"cloudformation:ContinueUpdateRollback\"],\"Resource\":\"*\",\"Effect\":\"Allow\",\"Sid\":\"CloudFormationPermissions\"},{\"Condition\":{\"StringNotEquals\":{\"s3:ResourceAccount\":\"${AWS::AccountId}\"}},\"Action\":[\"s3:GetObject*\",\"s3:GetBucket*\",\"s3:List*\",\"s3:Abort*\",\"s3:DeleteObject*\",\"s3:PutObject*\"],\"Resource\":\"*\",\"Effect\":\"Allow\",\"Sid\":\"PipelineCrossAccountArtifactsBucket\"},{\"Condition\":{\"StringEquals\":{\"kms:ViaService\":\"s3.${AWS::Region}.amazonaws.com\"}},\"Action\":[\"kms:Decrypt\",\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey*\"],\"Resource\":\"*\",\"Effect\":\"Allow\",\"Sid\":\"PipelineCrossAccountArtifactsKey\"},{\"Action\":\"iam:PassRole\",\"Resource\":\"arn:aws:iam::${AWS::AccountId}:role/${IAMRole}\",\"Effect\":\"Allow\"},{\"Action\":[\"cloudformation:DescribeStackEvents\",\"cloudformation:GetTemplate\",\"cloudformation:DeleteStack\",\"cloudformation:UpdateTerminationProtection\",\"sts:GetCallerIdentity\",\"cloudformation:GetTemplateSummary\"],\"Resource\":\"*\",\"Effect\":\"Allow\",\"Sid\":\"CliPermissions\"},{\"Action\":[\"s3:GetObject*\",\"s3:GetBucket*\",\"s3:List*\"],\"Resource\":[\"arn:aws:s3:::${S3BucketPattern}\",\"arn:aws:s3:::${S3BucketPattern}/*\"],\"Effect\":\"Allow\",\"Sid\":\"CliStagingBucket\"},{\"Action\":[\"ssm:GetParameter\",\"ssm:GetParameters\"],\"Resource\":[\"arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SSMParameterPattern}\"],\"Effect\":\"Allow\",\"Sid\":\"ReadVersion\"}]}"
            Roles:
              - !Ref IAMRole2
            PolicyName: "default"

    EC2VPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "10.0.0.0/16"
            EnableDnsSupport: true
            EnableDnsHostnames: true

            Tags:
              -
                Key: "Name"
                Value: !Ref "NameTag"
              -
                Key: "project"
                Value: !Ref "NameTag"

    EC2SubnetPublicA:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}a"
            CidrBlock: "10.0.4.0/24"
            VpcId:
              Ref: "EC2VPC"
            MapPublicIpOnLaunch: false
            Tags:
              -
                Key: "project"
                Value: !Ref "NameTag"
              -
                Key: "Name"
                Value: "dev-public-a"
    EC2SecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "An internal security group"
            GroupName: "agent-internal"
            Tags: 
              - 
                Key: "project"
                Value: !Ref "NameTag"
              - 
                Key: "Name"
                Value: "sg-agent-internal"
            VpcId:
              Ref: "EC2VPC"
            # SecurityGroupIngress: 
            #   - 
            #     SourceSecurityGroupId: !Ref EC2SecurityGroup2
            #     SourceSecurityGroupOwnerId: "${AWS::AccountId}"
            #     Description: "Ingress Rule"
            #     FromPort: 80
            #     IpProtocol: "tcp"
            #     ToPort: 80
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                Description: "All protocols"
                IpProtocol: "-1"
              - 
                CidrIpv6: "::/0"
                Description: "All protocols"
                IpProtocol: "-1"

    EC2LaunchTemplate:
        Type: "AWS::EC2::LaunchTemplate"
        Properties:
            LaunchTemplateName: !Sub "agent-docker-t4g.small-launch-template"
            LaunchTemplateData:
                UserData: !Base64 |
                  #!/bin/bash
                  export HOME=/root
                  apt update
                  apt-get install -y ec2-instance-connect git 
                  apt-get install -y cloud-utils apt-transport-https ca-certificates curl software-properties-common
                  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
                  add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs)  stable"
                  apt-get update
                  apt-get install -y docker-ce
                  usermod -aG docker ubuntu
                  curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
                  chmod +x /usr/local/bin/docker-compose
                  snap install amazon-ssm-agent --classic || echo oops1
                  snap start amazon-ssm-agent || echo oops2
                  apt-get install -y --no-install-recommends ca-certificates=20230311 curl=7.88.1-10+deb12u7 |  echo oops
                  apt-get install -y wget unzip systemd
                  if [ ! -d "/opt/agent/" ]; then
                  git clone https://github.com/meta-introspector/cloud-deployment-eliza/ "/opt/agent/"
                  fi
                  cd "/opt/agent/" || exit 1
                  git stash
                  git fetch --all
                  git checkout --track --force "origin/feature/arm64_fastembed"
                  bash -x /opt/agent/rundocker.sh
                  
                BlockDeviceMappings:
                  -
                    DeviceName: "/dev/sda1"
                    Ebs:
                        Encrypted: true
                        VolumeSize: 30
                        VolumeType: "gp3"
                IamInstanceProfile:
                    Name: "ssm-agent-profile"
                NetworkInterfaces:
                  -
                    AssociatePublicIpAddress: true
                    DeleteOnTermination: true
                    DeviceIndex: 0
                    Groups:
                      - !Ref EC2SecurityGroup
                    NetworkCardIndex: 0
                ImageId: !Sub "${AmiId}"
                InstanceType: "t4g.small"
    AutoScalingAutoScalingGroup:
        Type: "AWS::AutoScaling::AutoScalingGroup"
        Properties:
            AutoScalingGroupName: !Sub "docker-agent-ami-t4g.small"
            MixedInstancesPolicy:
                LaunchTemplate:
                    LaunchTemplateSpecification:
                        LaunchTemplateId: !Ref EC2LaunchTemplate
                        LaunchTemplateName: !Sub "agent-docker-t4g.small-launch-template"
                        Version: !Ref LtVersion
                InstancesDistribution:
                    OnDemandAllocationStrategy: "prioritized"
                    OnDemandBaseCapacity: 0
                    OnDemandPercentageAboveBaseCapacity: 100
                    SpotAllocationStrategy: "lowest-price"
                    SpotInstancePools: 2
            MinSize: 1
            MaxSize: 2
            DesiredCapacity: 1
            Cooldown: 300
            AvailabilityZones:
              - !GetAZs ""

            HealthCheckType: "EC2"
            HealthCheckGracePeriod: 300
            VPCZoneIdentifier:
              - !Ref EC2SubnetPublicA
            TerminationPolicies:
              - "Default"
            ServiceLinkedRoleARN: "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
            Tags:
              -
                Key: "Name"
                Value: "docker-agent-ami-t4g.small"
                PropagateAtLaunch: true
            NewInstancesProtectedFromScaleIn: false
